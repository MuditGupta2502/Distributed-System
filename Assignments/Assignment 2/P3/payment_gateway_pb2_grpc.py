# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import payment_gateway_pb2 as payment__gateway__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in payment_gateway_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PaymentGatewayStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/stripe.PaymentGateway/RegisterClient',
                request_serializer=payment__gateway__pb2.ClientInfo.SerializeToString,
                response_deserializer=payment__gateway__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.ProcessPayment = channel.unary_unary(
                '/stripe.PaymentGateway/ProcessPayment',
                request_serializer=payment__gateway__pb2.PaymentRequest.SerializeToString,
                response_deserializer=payment__gateway__pb2.PaymentResponse.FromString,
                _registered_method=True)
        self.ViewBalance = channel.unary_unary(
                '/stripe.PaymentGateway/ViewBalance',
                request_serializer=payment__gateway__pb2.BalanceRequest.SerializeToString,
                response_deserializer=payment__gateway__pb2.BalanceResponse.FromString,
                _registered_method=True)


class PaymentGatewayServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentGatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=payment__gateway__pb2.ClientInfo.FromString,
                    response_serializer=payment__gateway__pb2.RegisterResponse.SerializeToString,
            ),
            'ProcessPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessPayment,
                    request_deserializer=payment__gateway__pb2.PaymentRequest.FromString,
                    response_serializer=payment__gateway__pb2.PaymentResponse.SerializeToString,
            ),
            'ViewBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewBalance,
                    request_deserializer=payment__gateway__pb2.BalanceRequest.FromString,
                    response_serializer=payment__gateway__pb2.BalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stripe.PaymentGateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('stripe.PaymentGateway', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaymentGateway(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.PaymentGateway/RegisterClient',
            payment__gateway__pb2.ClientInfo.SerializeToString,
            payment__gateway__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.PaymentGateway/ProcessPayment',
            payment__gateway__pb2.PaymentRequest.SerializeToString,
            payment__gateway__pb2.PaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.PaymentGateway/ViewBalance',
            payment__gateway__pb2.BalanceRequest.SerializeToString,
            payment__gateway__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BankServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PrepareTransaction = channel.unary_unary(
                '/stripe.BankService/PrepareTransaction',
                request_serializer=payment__gateway__pb2.TransactionRequest.SerializeToString,
                response_deserializer=payment__gateway__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.CommitTransaction = channel.unary_unary(
                '/stripe.BankService/CommitTransaction',
                request_serializer=payment__gateway__pb2.TransactionRequest.SerializeToString,
                response_deserializer=payment__gateway__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.AbortTransaction = channel.unary_unary(
                '/stripe.BankService/AbortTransaction',
                request_serializer=payment__gateway__pb2.TransactionRequest.SerializeToString,
                response_deserializer=payment__gateway__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/stripe.BankService/Ping',
                request_serializer=payment__gateway__pb2.Empty.SerializeToString,
                response_deserializer=payment__gateway__pb2.PingResponse.FromString,
                _registered_method=True)
        self.GetBalance = channel.unary_unary(
                '/stripe.BankService/GetBalance',
                request_serializer=payment__gateway__pb2.BalanceRequest.SerializeToString,
                response_deserializer=payment__gateway__pb2.BalanceResponse.FromString,
                _registered_method=True)


class BankServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PrepareTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BankServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PrepareTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareTransaction,
                    request_deserializer=payment__gateway__pb2.TransactionRequest.FromString,
                    response_serializer=payment__gateway__pb2.TransactionResponse.SerializeToString,
            ),
            'CommitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitTransaction,
                    request_deserializer=payment__gateway__pb2.TransactionRequest.FromString,
                    response_serializer=payment__gateway__pb2.TransactionResponse.SerializeToString,
            ),
            'AbortTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortTransaction,
                    request_deserializer=payment__gateway__pb2.TransactionRequest.FromString,
                    response_serializer=payment__gateway__pb2.TransactionResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=payment__gateway__pb2.Empty.FromString,
                    response_serializer=payment__gateway__pb2.PingResponse.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=payment__gateway__pb2.BalanceRequest.FromString,
                    response_serializer=payment__gateway__pb2.BalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stripe.BankService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('stripe.BankService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BankService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PrepareTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.BankService/PrepareTransaction',
            payment__gateway__pb2.TransactionRequest.SerializeToString,
            payment__gateway__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.BankService/CommitTransaction',
            payment__gateway__pb2.TransactionRequest.SerializeToString,
            payment__gateway__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AbortTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.BankService/AbortTransaction',
            payment__gateway__pb2.TransactionRequest.SerializeToString,
            payment__gateway__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.BankService/Ping',
            payment__gateway__pb2.Empty.SerializeToString,
            payment__gateway__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stripe.BankService/GetBalance',
            payment__gateway__pb2.BalanceRequest.SerializeToString,
            payment__gateway__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
